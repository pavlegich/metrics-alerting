// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Webhook_Ping_FullMethodName    = "/proto.Webhook/Ping"
	Webhook_Updates_FullMethodName = "/proto.Webhook/Updates"
	Webhook_Value_FullMethodName   = "/proto.Webhook/Value"
	Webhook_Main_FullMethodName    = "/proto.Webhook/Main"
)

// WebhookClient is the client API for Webhook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	Updates(ctx context.Context, opts ...grpc.CallOption) (Webhook_UpdatesClient, error)
	Value(ctx context.Context, in *ValueRequest, opts ...grpc.CallOption) (*ValueResponse, error)
	Main(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Webhook_MainClient, error)
}

type webhookClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookClient(cc grpc.ClientConnInterface) WebhookClient {
	return &webhookClient{cc}
}

func (c *webhookClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Webhook_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Updates(ctx context.Context, opts ...grpc.CallOption) (Webhook_UpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Webhook_ServiceDesc.Streams[0], Webhook_Updates_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookUpdatesClient{stream}
	return x, nil
}

type Webhook_UpdatesClient interface {
	Send(*UpdatesRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type webhookUpdatesClient struct {
	grpc.ClientStream
}

func (x *webhookUpdatesClient) Send(m *UpdatesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *webhookUpdatesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webhookClient) Value(ctx context.Context, in *ValueRequest, opts ...grpc.CallOption) (*ValueResponse, error) {
	out := new(ValueResponse)
	err := c.cc.Invoke(ctx, Webhook_Value_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookClient) Main(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Webhook_MainClient, error) {
	stream, err := c.cc.NewStream(ctx, &Webhook_ServiceDesc.Streams[1], Webhook_Main_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &webhookMainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Webhook_MainClient interface {
	Recv() (*MainResponse, error)
	grpc.ClientStream
}

type webhookMainClient struct {
	grpc.ClientStream
}

func (x *webhookMainClient) Recv() (*MainResponse, error) {
	m := new(MainResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebhookServer is the server API for Webhook service.
// All implementations must embed UnimplementedWebhookServer
// for forward compatibility
type WebhookServer interface {
	Ping(context.Context, *emptypb.Empty) (*PingResponse, error)
	Updates(Webhook_UpdatesServer) error
	Value(context.Context, *ValueRequest) (*ValueResponse, error)
	Main(*emptypb.Empty, Webhook_MainServer) error
	mustEmbedUnimplementedWebhookServer()
}

// UnimplementedWebhookServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServer struct {
}

func (UnimplementedWebhookServer) Ping(context.Context, *emptypb.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWebhookServer) Updates(Webhook_UpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedWebhookServer) Value(context.Context, *ValueRequest) (*ValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Value not implemented")
}
func (UnimplementedWebhookServer) Main(*emptypb.Empty, Webhook_MainServer) error {
	return status.Errorf(codes.Unimplemented, "method Main not implemented")
}
func (UnimplementedWebhookServer) mustEmbedUnimplementedWebhookServer() {}

// UnsafeWebhookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServer will
// result in compilation errors.
type UnsafeWebhookServer interface {
	mustEmbedUnimplementedWebhookServer()
}

func RegisterWebhookServer(s grpc.ServiceRegistrar, srv WebhookServer) {
	s.RegisterService(&Webhook_ServiceDesc, srv)
}

func _Webhook_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Updates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WebhookServer).Updates(&webhookUpdatesServer{stream})
}

type Webhook_UpdatesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UpdatesRequest, error)
	grpc.ServerStream
}

type webhookUpdatesServer struct {
	grpc.ServerStream
}

func (x *webhookUpdatesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *webhookUpdatesServer) Recv() (*UpdatesRequest, error) {
	m := new(UpdatesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Webhook_Value_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServer).Value(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Webhook_Value_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServer).Value(ctx, req.(*ValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Webhook_Main_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebhookServer).Main(m, &webhookMainServer{stream})
}

type Webhook_MainServer interface {
	Send(*MainResponse) error
	grpc.ServerStream
}

type webhookMainServer struct {
	grpc.ServerStream
}

func (x *webhookMainServer) Send(m *MainResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Webhook_ServiceDesc is the grpc.ServiceDesc for Webhook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Webhook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Webhook",
	HandlerType: (*WebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Webhook_Ping_Handler,
		},
		{
			MethodName: "Value",
			Handler:    _Webhook_Value_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updates",
			Handler:       _Webhook_Updates_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Main",
			Handler:       _Webhook_Main_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics.proto",
}
